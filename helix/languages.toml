[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100    # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true        # completions will return before snippets by default
feature_words = true         # enable completion by word
feature_snippets = true      # enable snippets
feature_unicode_input = true # enable "unicode input"
feature_paths = true         # enable path completion

[language-server.gpt]
command = "helix-gpt"

[language-server.typos]
command = "typos-lsp"
config.diagnosticSeverity = "Warning"

[language-server.vtsls]
args = ["--stdio"]
command = "vtsls"

[language-server.vtsls.config.typescript.preferences]
importModuleSpecifier = "non-relative"

[language-server.vtsls.config.typescript.inlayHints]
parameterNames = { enabled = "all", suppressWhenArgumentMatchesName = true }
parameterTypes = { enabled = false }
variableTypes = { enabled = false, suppressWhenTypeMatchesName = true }
propertyDeclarationTypes = { enabled = true }
functionLikeReturnTypes = { enabled = false }
enumMemberValues = { enabled = false }


[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
validate = "on" 
experimental = { useFlatConfig = false } 
rulesCustomizations = [] 
run = "onType" 
problems = { shortenToSingleLine = false } 
nodePath = "" 

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.workingDirectory]
mode = "location"


[language-server.typescript-language-server]
required-root-patterns = ["package.json"]
documentFormatting = false

[language-server.typescript-language-server.config.pereferences]
importModuleSpecifier = "non-relative"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = false
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = false
includeInlayVariableTypeHints = false
includeInlayVariableTypeHintsWhenTypeMatchesName = true

[[language]]
name = "typescript"
language-servers = [
  "vtsls",
  "eslint",
  "typos",
]
roots = ["package.json", "tsconfig.json", ".git"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true


[[language]]
name = "javascript"
language-servers = [
  "vtsls",
  "eslint",
  "typos",
]
roots = ["package.json", "tsconfig.json"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true


[[language]]
name = "tsx"
language-servers = [
  "vtsls",
  "eslint",
  "typos",
  "tailwindcss-ls"
]
roots = ["package.json", "tsconfig.json", ".git"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true


[[language]]
name = "jsx"
language-servers = [
  "vtsls",
  "eslint",
  "typos",
  "tailwindcss-ls"
]
roots = ["package.json", "tsconfig.json"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true


[[language]]
name = "json"
language-servers = ["vscode-json-language-server"]
formatter = { command = 'npx', args = ["prettier", "--parser", "json", "--single-quote", "false"] }
auto-format = true

[[language]]
name = "lua"
auto-format = true

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "html"
formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
language-servers = [
  "vscode-html-language-server",
  "tailwindcss-ls"
]
auto-format = true

[[language]]
name = "css"
formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
language-servers = [
  "vscode-css-language-server",
]
auto-format = true

[[language]]
name = "scss"
formatter = { command = "npx", args = ["prettier", "--parser", "scss"] }
language-servers = ["vscode-css-language-server"]

[[language]]
name = "python"
language-servers = ["pylsp", "typos"]
roots = [".git"]
workspace-lsp-roots = ["src/updater"]
auto-format = true

[language-server.pylsp.config.pylsp.plugins]
black = { enabled = true }
isort = { enabled = true }
rope_autoimport = { enabled = true }
pylint = { enabled = true }
flake8 = { enabled = false, ignore = ["E501"] }
autopep8 = { enabled = false }
mccabe = { enabled = false }
pycodestyle = { enabled = false }
pyflakes = { enabled = false }
yapf = { enabled = false }
ruff = {  enabled = true, ignore = ["F401"], lineLength = 120 }
